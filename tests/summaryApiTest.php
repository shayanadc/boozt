<?php

namespace Tests;

use App\Fixture;
use App\Model\Item;
use App\Model\Order;
use App\Model\User;

class summaryApiTest extends TestCase
{
    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->runMigration();
        $this->runFixtures();

    }
    public function tearDown(): void
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
        $this->purgeDB();
    }

    public function runFixtures(){
        $user = Fixture::create( User::class,['email' => 'mail@mail.com', 'first_name' => 'shayan', 'last_name' => 'hh']);
        $order1 = Fixture::create(Order::class, ['purchase_date' => '2022-03-03 12:30:10', 'country'=> 'sweden', 'device' => 'mac', 'user_id' => $user->id]);
        $order2 = Fixture::create(Order::class, ['purchase_date' => '2022-04-21 12:30:10', 'country'=> 'sweden', 'device' => 'watch', 'user_id' => $user->id]);
        $item1 = Fixture::create(Item::class, ['qty' => 1, 'price' => 100, 'ean' => 'xyz', 'order_id' => $order1->id]);
        $item2 = Fixture::create(Item::class, ['qty' => 1, 'price' => 200, 'ean' => 'xyz', 'order_id' => $order2->id]);
    }

    /**
     * @runInSeparateProcess
     */
    public function testNotFoundRouting(){

        $response = $this->getJson('/summarys');
        $this->assertEquals(['message' => 'not found'], $response);

    }

    /**
     * @runInSeparateProcess
     */
    public function testGettingAllSummaryApi(){

        $response = $this->getJson('/');
        $this->assertEquals(['orders' => 0, 'customers'=> 1, 'revenue' => null], $response);

    }

    /**
     * @runInSeparateProcess
     */

    public function testGettingSpecificSummaryApi(){

        $response = $this->getJson('/?orders=1');
        $this->assertEquals(['orders' => 0], $response);
    }

    /**
     * @runInSeparateProcess
     */
    public function testGetManySummaryApiWithSpecifyingDateTime(){

        $response = $this->getJson('/?to=2022-05-30&from=2022-03-12&revenue=1&customers=1&orders=1');
        $this->assertEquals(['orders' => 2, 'customers'=> 1, 'revenue' => '300.00'], $response);
    }
}